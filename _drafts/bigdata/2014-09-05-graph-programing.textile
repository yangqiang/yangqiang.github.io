---
layout: post
title: "图编程初探"
description: ""
category: BigData
tags: [Graph]
summary: 从PageRank算法和Connected Component算法展开分析。
---
{% include JB/setup %}

h2. PageRank 算法

使用 Spark RDD 如何实现？

考虑以下简单有向图（第一个数字是起点 ID，第二个数字是终点 ID）：
1, 2
1, 3
2, 3

val graph = sc.parallelise(Array((1,2), (1, 3), (2, 3)))
// 变成 (1, (2, 3)), (2, 3))
val graph_ = graph.groupByKey

// 初始 rank 值
var ranks = graph_.map(k => (k, 1.0))
// 贡献值
val contribs = ranks.join(graph_).values(x => {
  x._1.foreach(i => (i, x._2/x._1.size))
}).flatMap
// 新的 rank 值
ranks = contribs.reduceByKey(_+_).mapValues(0.15 + 0.85 * _)

使用 Pregel 框架如何实现？



h2. Connected Component 算法

定义： "Wikipedia":http://en.wikipedia.org/wiki/Connected_component_(graph_theory)
无向图的连通区域，是指一个具有以下特点的子图：1）子图内任意两点之间存在路径；2）子图内的点与到原图内任一其他点之间没有路径。

对于有向图，则使用 "强连通图":http://en.wikipedia.org/wiki/Strongly_connected_component 的定义：
强连通是指，有向图中任意两点之间可达。
强连通图拥有线性时间解的算法。

"Kosaraju 强连通图算法":http://en.wikipedia.org/wiki/Kosaraju%27s_algorithm

* Let G be a directed graph and S be an empty stack.
* While S does not contain all vertices:
** Choose an arbitrary vertex v not in S. Perform a depth-first search starting at v. Each time that depth-first search finishes expanding a vertex u, push u onto S.
* Reverse the directions of all arcs to obtain the transpose graph.
* While S is nonempty:
** Pop the top vertex v from S. Perform a depth-first search starting at v in the transpose graph. The set of visited vertices will give the strongly connected component containing v; record this and remove all these vertices from the graph G and the stack S. Equivalently, breadth-first search (BFS) can be used instead of depth-first search.

Tarjan 强连通图算法


Spark RDD

有向图：
1, 2
2, 3
4, 5
5, 6

val graph = sc.parallelise(Array((1,2), (2,3), (4,5), (5,6)))


operators: join, goupbykey

h2. 分析

图算法对于 RDD 而言，多数都需要使用 wide dependency 类的处理。

h2. 困惑

有向图有环图的深度优先遍历算法（使用邻接表数据结构）的复杂度还能是 O(E) 吗？检测当前点是否已经被访问过，是需要时间开销的，所以，时间复杂度不应该是 O(V*E) 吗？需要仔细理解邻接表的设计思想。
如果使用 Hash 表来存储顶点是否被访问的状态，那么检测的时间复杂度可以减少到 O(1)

h2. 参考资料

"Pregel 一份科普性的介绍":http://www.360doc.com/content/11/0609/19/6986090_122743127.shtml